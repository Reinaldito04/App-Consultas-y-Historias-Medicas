funciones de citas:
#         self.btn_citas.clicked.connect(self.mostrarCitas)
#         self.btn_agg_cita.clicked.connect(self.mostrarFormularioAgendarCita)
#         self.btn_borrar.clicked.connect(self.mostrarFormularioEliminarCita)
#         self.btn_back.clicked.connect(self.volverAlMenu)
#         self.btn_refresh.clicked.connect(self.buscarCitas)
#         self.btn_buscar_2.clicked.connect(self.buscarPacienteParaCita)
#         self.btn_edit.clicked.connect(self.editarCita)
#         self.btn_agg.clicked.connect(self.agendarCita)
#         self.btn_buscar_3.clicked.connect(self.buscarCitaParaEliminar)
#         self.btn_delete.clicked.connect(self.eliminarCita)

#     def mostrarCitas(self):
#         self.stackedWidget.setCurrentWidget(self.tabla_citas)
        
#  # Función para mostrar el formulario de agendar cita
#     def mostrarFormularioAgendarCita(self):
#         self.stackedWidget.setCurrentWidget(self.agg_cita)

#     # Función para mostrar el formulario de eliminar cita
#     def mostrarFormularioEliminarCita(self):
#         self.stackedWidget.setCurrentWidget(self.delete_cita)

#     # Función para volver al menú principal
#     def volverAlMenu(self):
#         print("Volviendo al menú principal")
#         menu_principal = MenuPrincipal(self.id_user)
#         conexion =sqlite3.connect('interfaces/database.db')
#         cursor= conexion.cursor()
#         cursor.execute("SELECT Username FROM Users WHERE ID = ?", (self.id_user,))
        
#         resultado= cursor.fetchone()
#         if resultado :
#             nombre_usuario= resultado[0]
#             horaActual = datetime.datetime.now().time()
            
#             if (horaActual >= datetime.time(5, 0, 0)) and (horaActual <= datetime.time(12, 0, 0)):
                   
#                 textForMenu = f"Buenos dias {nombre_usuario} \n¿Que deseas hacer hoy?"
    
#             if (horaActual >= datetime.time(12, 0, 0)) and (horaActual <= datetime.time(18, 0, 0)):
                   
#                 textForMenu = f"Buenas tardes {nombre_usuario} \n¿Que deseas hacer hoy?"
                   
#             if (horaActual >= datetime.time(18, 0, 0)) and (horaActual <= datetime.time(5, 0, 0)):
                   
#                 textForMenu = f"Buenas noches {nombre_usuario} \n¿Que deseas hacer hoy?"
#             else :
#                     textForMenu = f"Hola {nombre_usuario} \n¿Que deseas hacer hoy?"
#             menu_principal.lb_nombre.setText(textForMenu)
#             menu_principal.show()
#             self.hide()
#         pass
#  # Función para buscar citas
#     def buscarCitas(self):
#         try:
#             conexion = sqlite3.connect('interfaces/database.db')
#             cursor = conexion.cursor()
#             idUser = self.id_user

#             # Ejecuta una consulta para obtener los datos de los pacientes y ordenar por Fecha_Cita descendente
#             cursor.execute("SELECT Cedula, Nombre, Apellido, Edad, Direccion, Sexo, Fecha_Cita, Hora_Cita FROM Pacientes WHERE ID_user = ? ORDER BY Fecha_Cita ASC, Hora_Cita ASC ", (idUser,))
#             tabla_cita = cursor.fetchall()
#             conexion.close()

#             # Filtrar las filas que no contengan ningún valor 'None'
#             filas_filtradas = [paciente for paciente in tabla_cita if None not in paciente]

#             # Limpiar la tabla existente si es necesario
#             self.tabla_cita.clearContents()

#             # Establecer el número de filas y columnas en la tabla
#             self.tabla_cita.setRowCount(len(filas_filtradas))
#             self.tabla_cita.setColumnCount(len(filas_filtradas[0]))

#             # Agregar los datos a la tabla
#             for row, paciente in enumerate(filas_filtradas):
#                 for column, value in enumerate(paciente):
#                     item = QTableWidgetItem(str(value))
#                     self.tabla_cita.setItem(row, column, item)
#         except:
#             QMessageBox.critical(self, "Error", "No hay citas actualmente.")

#     # Función para buscar paciente para asignar cita
#     def buscarPacienteParaCita(self):
#         idUser = self.id_user
#         cedula =self.in_busqueda_2.text()
#         if len(cedula) <=0:
#             QMessageBox.warning(self,"Error","Ingrese una cedula")
#         else:
#             name = self.in_name.text()
#             apellido = self.in_apell.text()
#             try:
#                 conexion = sqlite3.connect('interfaces\database.db')
#                 cursor = conexion.cursor()
#                 cursor.execute("SELECT Nombre , Apellido FROM Pacientes WHERE Cedula = ? AND ID_user = ?",(cedula, idUser))
#                 resultado = cursor.fetchone()
#                 conexion.close()
#                 if resultado :
#                     nombre_paciente ,apellido_paciente = resultado
#                     self.in_name.setText(nombre_paciente)
#                     self.in_apell.setText(apellido_paciente)
#                 else:
#                     QMessageBox.critical(self,"Error","El paciente no fue encontrado")
#             except sqlite3.Error as error:
#                 QMessageBox.critical(self, "Error", f"Error al buscar paciente: {str(error)}")

#     # Función para editar una cita
#     def editarCita(self):
#         idUser = self.id_user
#         cedula = self.in_busqueda_2.text()
        
#         fecha = self.fecha.selectedDate()
#         fechaToString = fecha.toString('yyyy-MM-dd')
            
#         hora = self.hora.time()
#         horaToString = hora.toString('hh:mmm:ss')
        
#         try:
#             conexion = sqlite3.connect('interfaces/database.db')
#             cursor = conexion.cursor()
            
#             # Verificar si existe un paciente con la cédula proporcionada
#             cursor.execute("SELECT COUNT(*) FROM Pacientes WHERE Cedula = ?", (cedula,))
#             existe_paciente = cursor.fetchone()[0] > 0
            
#             if existe_paciente:
#                 # Si el paciente existe, proceder a actualizar la cita
#                 cursor.execute("UPDATE Pacientes SET Fecha_Cita = ?, Hora_Cita = ? WHERE Cedula = ?",
#                             (fechaToString, horaToString, cedula))
                
#                 # Guardar los cambios en la base de datos
#                 conexion.commit()
                
#                 # Mostrar un mensaje de éxito
#                 QMessageBox.information(self, "Información", "Cita actualizada con éxito.")
#             else:
#                 # Si el paciente no existe, mostrar un mensaje de error
#                 QMessageBox.warning(self, "Advertencia", "No se encontró un paciente con la cédula proporcionada.")
            
#             # Cerrar la conexión con la base de datos
#             conexion.close()
            
#         except sqlite3.Error as error:
#             # En caso de error, mostrar un mensaje de error
#             QMessageBox.critical(self, "Error", f"Error al actualizar la cita: {str(error)}")

#     # Función para agendar una cita
#     def agendarCita(self):
#         idUser = self.id_user
#         cedula = self.in_busqueda_2.text()
        
#         fecha = self.fecha.selectedDate()
#         fechaToString = fecha.toString('yyyy-MM-dd')
            
#         hora = self.hora.time()
#         horaToString = hora.toString('hh:mmm:ss')
        
#         try:
#             conexion = sqlite3.connect('interfaces/database.db')
#             cursor = conexion.cursor()
            
#             # Verificar si existe un paciente con la cédula proporcionada
#             cursor.execute("SELECT COUNT(*) FROM Pacientes WHERE Cedula = ?", (cedula,))
#             existe_paciente = cursor.fetchone()[0] > 0
            
#             if existe_paciente:
#                 # Si el paciente existe, proceder a actualizar la cita
#                 cursor.execute("UPDATE Pacientes SET Fecha_Cita = ?, Hora_Cita = ? WHERE Cedula = ?",
#                             (fechaToString, horaToString, cedula))
                
#                 # Guardar los cambios en la base de datos
#                 conexion.commit()
                
#                 # Mostrar un mensaje de éxito
#                 QMessageBox.information(self, "Información", "Cita guardada con éxito.")
#             else:
#                 # Si el paciente no existe, mostrar un mensaje de error
#                 QMessageBox.warning(self, "Advertencia", "No se encontró un paciente con la cédula proporcionada.")
            
#             # Cerrar la conexión con la base de datos
#             conexion.close()
            
#         except sqlite3.Error as error:
#             # En caso de error, mostrar un mensaje de error
#             QMessageBox.critical(self, "Error", f"Error al guardar la cita: {str(error)}")
        
        

    # # Función para buscar una cita para eliminar
    # def buscarCitaParaEliminar(self):
    #     try:
    #         conexion = sqlite3.connect('interfaces/database.db')
    #         cursor = conexion.cursor()
    #         idUser = self.id_user
    #         cedula = self.in_busqueda_3.text()
    #         # Ejecuta una consulta para obtener los datos de los pacientes
    #         cursor.execute("SELECT Cedula, Nombre, Apellido, Edad, Direccion , Sexo, Fecha_Cita, Hora_Cita  FROM Pacientes WHERE Cedula = ? AND ID_user = ?", (cedula , idUser) )
            
           
    #         tabla_citas_delete = cursor.fetchall()
    #         conexion.close()

    #         # Limpiar la tabla existente si es necesario
    #         self.tabla_citas_delete.clearContents()

    #         # Establecer el número de filas y columnas en la tabla
    #         self.tabla_citas_delete.setRowCount(len(tabla_citas_delete))
    #         self.tabla_citas_delete.setColumnCount(len(tabla_citas_delete[0]))

    #         # Agregar los datos a la tabla
    #         for row, paciente in enumerate(tabla_citas_delete):
    #             for column, value in enumerate(paciente):
    #                 item = QTableWidgetItem(str(value))
    #                 self.tabla_citas_delete.setItem(row, column, item)
    #     except:
    #         QMessageBox.critical(self, "Error", "No hay ningún paciente con esa cedula.")

    # # Función para eliminar una cita
    # def eliminarCita(self):
    #     try:
    #         cedula = self.in_busqueda_3.text()
    
    #         if len(cedula) == 0:
    #             QMessageBox.critical(self, "Error", "Ingrese una cédula")
    #         else:
    #             citaNull = None
    #             horaNull = None
    #             conexion = sqlite3.connect('interfaces/database.db')
    #             cursor = conexion.cursor()
    #             cursor.execute("UPDATE Pacientes SET Fecha_Cita = ?, Hora_Cita = ? WHERE Cedula = ?",
    #                     (citaNull, horaNull, cedula))
    #             conexion.commit()
    #             conexion.close()
        
    #     # Eliminación exitosa, muestra un mensaje y realiza otras acciones si es necesario
    #             QMessageBox.information(self, "Realizado", "La cita ha sido eliminada correctamente")
    #             self.tabla_citas_delete.clearContents()
    #             self.in_busqueda_3.clear()
    #     except sqlite3.Error as e:
    #         QMessageBox.critical(self, "Error", "Error al eliminar la cita  de la base de datos: " + str(e))
    #     pass

        

Funciones de registro de pacientes:
    # def actualizar_costo_t1(self):
    #     seleccion_t1 = self.t1.currentText()

    #     # Define un diccionario para asignar los valores de monto a cada selección
    #     if seleccion_t1 in self.valores_monto:
    #         monto = self.valores_monto[seleccion_t1]
    #         bolivares, operacion = self.calcularDivisa(monto)  # Captura los valores retornados
    #         self.montobs_t1.setText(str(bolivares))  # Convierte a cadena y establece en el QLineEdit
    #         self.montodola_t1.setText(str(monto))
    #         print(f"Seleccionaste {seleccion_t1}")
    #         self.totalPrecio()
    # def actualizar_costo_t2(self):
    #     seleccion_t1 = self.t2.currentText()

    #     # Define un diccionario para asignar los valores de monto a cada selección
    #     if seleccion_t1 in self.valores_monto:
    #         monto = self.valores_monto[seleccion_t1]
    #         bolivares, operacion = self.calcularDivisa(monto)  # Captura los valores retornados
    #         self.montobs_t2.setText(str(bolivares))  # Convierte a cadena y establece en el QLineEdit
    #         self.montodola_t2.setText(str(monto))
    #         print(f"Seleccionaste {seleccion_t1}")
    #         self.totalPrecio()
    # def actualizar_costo_t3(self):
    #     seleccion_t1 = self.t3.currentText()

    #     # Define un diccionario para asignar los valores de monto a cada selección
    #     if seleccion_t1 in self.valores_monto:
    #         monto = self.valores_monto[seleccion_t1]
    #         bolivares, operacion = self.calcularDivisa(monto)  # Captura los valores retornados
    #         self.montobs_t3.setText(str(bolivares))  # Convierte a cadena y establece en el QLineEdit
    #         self.montodola_t3.setText(str(monto))
    #         print(f"Seleccionaste {seleccion_t1}")
    #         self.totalPrecio()

